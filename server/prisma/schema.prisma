generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id                        String                     @id @default(cuid())
  name                      String
  email                     String                     @unique
  mobileNo                  String                     @unique
  password                  String
  permission                String[]
  isOwner                   Boolean                    @default(false)
  otps                      OTP[]
  createdAt                 DateTime                   @default(now())
  sessions                  AdminSession[]
  adminRestPasswordSessions AdminRestPasswordSession[]

  @@map("admin_user")
}

model OTP {
  id                         String   @id @default(cuid())
  code                       Int
  type                       TYPE
  adminUserId                String
  adminRestPasswordSessionId String?
  createdAt                  DateTime @default(now())
  expireAt                   DateTime @default(dbgenerated("now() + INTERVAL '15 minutes'"))

  adminUser                AdminUser                 @relation(fields: [adminUserId], references: [id])
  AdminRestPasswordSession AdminRestPasswordSession? @relation(fields: [adminRestPasswordSessionId], references: [id])

  @@map("otp")
}

enum TYPE {
  EMAIL
  MOBILE
}

model AdminRestPasswordSession {
  id          String    @id @default(cuid())
  adminUserId String
  isVarfied   Boolean   @default(false)
  isChanged   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  expireAt    DateTime  @default(dbgenerated("now() + INTERVAL '15 minutes'"))
  otp         OTP[]
  adminUser   AdminUser @relation(fields: [adminUserId], references: [id], onDelete: Cascade)

  @@map("admin_rest_password_session")
}

model AdminSession {
  id          String    @id @default(cuid())
  adminUserId String
  createdAt   DateTime  @default(now())
  expireAt    DateTime  @default(dbgenerated("now() + INTERVAL '1 hour'"))
  AdminUser   AdminUser @relation(fields: [adminUserId], references: [id], onDelete: Cascade)

  @@map("admin_session")
}

model User {
  id              String   @id @default(cuid())
  uid             String   @unique
  mobileNo        String   @unique
  name            String   @default("user")
  email           String?  @unique
  isEmailVerified Boolean  @default(false)
  blocked         Boolean  @default(false)
  createdAt       DateTime @default(now())

  @@map("user")
}

model Category {
  id                  String                @id @default(cuid())
  name                String
  description         String?
  isTag               Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  productOnCategories ProductOnCategories[]

  @@map("category")
}

model Product {
  id                  String                @id @default(cuid())
  name                String
  description         String
  description2        String
  description3        String?
  points              String[]
  maxPrice            Float
  sellPrice           Float
  fragrence           String?
  strength            String?
  preference          String?
  sustainable         String?
  type                String?
  idealFor            String?
  quantity            Int?
  isLive              Boolean               @default(false)
  images              ProductImage[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  productOnCategories ProductOnCategories[]

  @@map("product")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String?
  createdAt DateTime @default(now())
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@map("product_image")
}

model ProductOnCategories {
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_on_categories")
}
